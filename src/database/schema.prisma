generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  password     String    @db.VarChar(255)
  quota        Int       @default(100)
  level        UserLevel @default(user)
  token        String    @unique @db.VarChar(100)
  created_at   DateTime  @default(now())
  last_request DateTime? @updatedAt
  Device       Device[]

  @@map("users")
}

model qrCode {
  id          Int       @id @default(autoincrement())
  qr          String    @db.VarChar(500)
  created_at  DateTime  @default(now())
  last_update DateTime? @updatedAt

  @@map("qr_code")
}

model Device {
  id                  Int          @id @default(autoincrement())
  userEmail           String?
  device_id           String       @db.VarChar(100)
  status              DeviceStatus @default(disconnected)
  created_at          DateTime     @default(now())
  connected_at        DateTime?    @db.Timestamp
  disconnected_at     DateTime?    @db.Timestamp
  disconnected_reason String       @default("") @db.VarChar(100)
  User                User?        @relation(fields: [userEmail], references: [email])

  @@map("devices")
}

enum DeviceStatus {
  connected
  disconnected
}

enum MessageStatus {
  ERROR
  PENDING
  SERVER_ACK
  DELIVERY_ACK
  READ
  PLAYED
}

enum UserLevel {
  user
  member
  premium
}

model Chat {
  pkId                      BigInt   @id @default(autoincrement())
  sessionId                 String
  archived                  Boolean?
  contactPrimaryIdentityKey Bytes?
  conversationTimestamp     BigInt?
  createdAt                 BigInt?
  createdBy                 String?
  description               String?
  disappearingMode          Json?
  displayName               String?
  endOfHistoryTransfer      Boolean?
  endOfHistoryTransferType  Int?
  ephemeralExpiration       Int?
  ephemeralSettingTimestamp BigInt?
  id                        String
  isDefaultSubgroup         Boolean?
  isParentGroup             Boolean?
  lastMsgTimestamp          BigInt?
  lidJid                    String?
  markedAsUnread            Boolean?
  mediaVisibility           Int?
  messages                  Json?
  muteEndTime               BigInt?
  name                      String?
  newJid                    String?
  notSpam                   Boolean?
  oldJid                    String?
  pHash                     String?
  parentGroupId             String?
  participant               Json?
  pinned                    Int?
  pnJid                     String?
  pnhDuplicateLidThread     Boolean?
  readOnly                  Boolean?
  shareOwnPn                Boolean?
  support                   Boolean?
  suspended                 Boolean?
  tcToken                   Bytes?
  tcTokenSenderTimestamp    BigInt?
  tcTokenTimestamp          BigInt?
  terminated                Boolean?
  unreadCount               Int?
  unreadMentionCount        Int?
  wallpaper                 Json?
  lastMessageRecvTimestamp  Int?

  @@unique([sessionId, id], map: "unique_id_per_session_id_chat")
  @@index([sessionId])
}

model Contact {
  pkId         BigInt  @id @default(autoincrement())
  sessionId    String
  id           String
  name         String?
  notify       String?
  verifiedName String?
  imgUrl       String?
  status       String?

  @@unique([sessionId, id], map: "unique_id_per_session_id_contact")
  @@index([sessionId])
}

model Message {
  pkId                            BigInt   @id @default(autoincrement())
  sessionId                       String
  remoteJid                       String
  id                              String
  agentId                         String?
  bizPrivacyStatus                Int?
  broadcast                       Boolean?
  clearMedia                      Boolean?
  duration                        Int?
  ephemeralDuration               Int?
  ephemeralOffToOn                Boolean?
  ephemeralOutOfSync              Boolean?
  ephemeralStartTimestamp         BigInt?
  finalLiveLocation               Json?
  futureproofData                 Bytes?
  ignore                          Boolean?
  keepInChat                      Json?
  key                             Json
  labels                          Json?
  mediaCiphertextSha256           Bytes?
  mediaData                       Json?
  message                         Json?
  messageC2STimestamp             BigInt?
  messageSecret                   Bytes?
  messageStubParameters           Json?
  messageStubType                 Int?
  messageTimestamp                BigInt?
  multicast                       Boolean?
  originalSelfAuthorUserJidString String?
  participant                     String?
  paymentInfo                     Json?
  photoChange                     Json?
  pollAdditionalMetadata          Json?
  pollUpdates                     Json?
  pushName                        String?
  quotedPaymentInfo               Json?
  quotedStickerData               Json?
  reactions                       Json?
  revokeMessageTimestamp          BigInt?
  starred                         Boolean?
  status                          Int?
  statusAlreadyViewed             Boolean?
  statusPsa                       Json?
  urlNumber                       Boolean?
  urlText                         Boolean?
  userReceipt                     Json?
  verifiedBizName                 String?

  @@unique([sessionId, remoteJid, id], map: "unique_message_key_per_session_id")
  @@index([sessionId])
}

model Session {
  pkId      BigInt @id @default(autoincrement())
  sessionId String
  id        String
  data      String @db.Text

  @@unique([sessionId, id], map: "unique_id_per_session_id_session")
  @@index([sessionId])
}
